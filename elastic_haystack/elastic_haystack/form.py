__author__ = 'caimujia@foxmail.com'# -*- coding: utf-8 -*-from django import formsfrom haystack.forms import FacetedSearchForm ,HighlightedSearchFormfrom haystack.utils import Highlighterclass DateRangeSearchForm(FacetedSearchForm, HighlightedSearchForm):    # start_date = forms.DateField(required=False)    # end_date = forms.DateField(required=False)    # author_name = forms.CharField(required=False)    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    facetd_loca = forms.CharField(required=False)    facetd_prof = forms.CharField(required=False)    facetd_ebtype = forms.IntegerField(required=False)    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(DateRangeSearchForm, self).search()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.order_by('-textdate')        else:            sqs = sqs.order_by('-_score')        # Check to see if a start_date was chosen.        # if self.cleaned_data['start_date']:        #     sqs = sqs.filter(pub_date__gte=self.cleaned_data['start_date'])        #        # # Check to see if an end_date was chosen.        # if self.cleaned_data['end_date']:        #     sqs = sqs.filter(pub_date__lte=self.cleaned_data['end_date'])        # if self.cleaned_data['author_name']:        #     sqs = sqs.filter(author=self.cleaned_data['author_name'])        # if self.cleaned_data['start_applytime']:        #     sqs = sqs.filter(textdate__gte=str(self.cleaned_data['start_applytime']))        #        # if self.cleaned_data['end_applytime']:        #     sqs = sqs.filter(textdate__lt=str(self.cleaned_data['end_applytime']))        return sqsclass SearchForm_gdftu(FacetedSearchForm, HighlightedSearchForm):    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    autolink = forms.CharField(required=False)    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(SearchForm_gdftu, self).search()        # print "处理前",sqs.count()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.filter_and(webid='3').order_by('-textdate')        else:            sqs = sqs.filter_and(webid='3').order_by('-_score')        # if self.cleaned_data['autolink'] :        #     sqs = sqs.filter_and(autolink=self.cleaned_data['autolink'])        # Check to see if a start_date was chosen.        if sqs.count()==0:            pass        else:            if self.cleaned_data['start_applytime'] and self.cleaned_data['end_applytime']:                sqs = sqs.filter_and(textdate__gte=self.cleaned_data['start_applytime'],\                             textdate__lte=self.cleaned_data['end_applytime'])        return sqsclass SearchForm_pprd(FacetedSearchForm, HighlightedSearchForm):    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    item = forms.CharField(required=False)    ## item对应关系 :    # pprd_item_dic={    # 'news':'wx','message':'xx',\    # 'gd':'guangdong','ac':'ac'    # }    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(SearchForm_pprd, self).search()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.filter_and(webid='1').order_by('-textdate')        else:            sqs = sqs.filter_and(webid='1').order_by('-_score')        if self.cleaned_data['item']==1 :            #            pass        # if self.cleaned_data['autolink'] :        #     sqs = sqs.filter_and(autolink=self.cleaned_data['autolink'])        # Check to see if a start_date was chosen.        if sqs.count()==0:            pass        else:            if self.cleaned_data['start_applytime'] and self.cleaned_data['end_applytime']:                sqs = sqs.filter_and(textdate__gte=self.cleaned_data['start_applytime'],\                             textdate__lte=self.cleaned_data['end_applytime'])        return sqsclass SearchForm_gd(FacetedSearchForm, HighlightedSearchForm):    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    autolink = forms.CharField(required=False)    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(SearchForm_gd, self).search()        # print "处理前",sqs.count()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.filter_and(webid='11').order_by('-textdate')        else:            sqs = sqs.filter_and(webid='11').order_by('-_score')        # if self.cleaned_data['autolink'] :        #     sqs = sqs.filter_and(autolink=self.cleaned_data['autolink'])        # Check to see if a start_date was chosen.        if sqs.count()==0:            pass        else:            if self.cleaned_data['start_applytime'] and self.cleaned_data['end_applytime']:                sqs = sqs.filter_and(textdate__gte=self.cleaned_data['start_applytime'],                    textdate__lte=self.cleaned_data['end_applytime'])        return sqsclass SearchForm_grzx(FacetedSearchForm, HighlightedSearchForm):    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    autolink = forms.CharField(required=False)    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(SearchForm_grzx, self).search()        # print "处理前",sqs.count()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.filter_and(webid='2').order_by('-textdate')        else:            sqs = sqs.filter_and(webid='2').order_by('-_score')        # if self.cleaned_data['autolink'] :        #     sqs = sqs.filter_and(autolink=self.cleaned_data['autolink'])        # Check to see if a start_date was chosen.        if sqs.count()==0:            pass        else:            if self.cleaned_data['start_applytime'] and self.cleaned_data['end_applytime']:                sqs = sqs.filter_and(textdate__gte=self.cleaned_data['start_applytime'],                    textdate__lte=self.cleaned_data['end_applytime'])        return sqsclass SearchForm_gdemo(FacetedSearchForm, HighlightedSearchForm):    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    autolink = forms.CharField(required=False)    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(SearchForm_gdemo, self).search()        # print "处理前",sqs.count()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.filter_and(webid='4').order_by('-textdate')        else:            sqs = sqs.filter_and(webid='4').order_by('-_score')        # if self.cleaned_data['autolink'] :        #     sqs = sqs.filter_and(autolink=self.cleaned_data['autolink'])        # Check to see if a start_date was chosen.        if sqs.count()==0:            pass        else:            if self.cleaned_data['start_applytime'] and self.cleaned_data['end_applytime']:                sqs = sqs.filter_and(textdate__gte=self.cleaned_data['start_applytime'],                    textdate__lte=self.cleaned_data['end_applytime'])        return sqsclass SearchForm_gdqzlx(FacetedSearchForm, HighlightedSearchForm):    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    autolink = forms.CharField(required=False)    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(SearchForm_gdqzlx, self).search()        # print "处理前",sqs.count()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.filter_and(webid='5').order_by('-textdate')        else:            sqs = sqs.filter_and(webid='5').order_by('-_score')        # if self.cleaned_data['autolink'] :        #     sqs = sqs.filter_and(autolink=self.cleaned_data['autolink'])        # Check to see if a start_date was chosen.        if sqs.count()==0:            pass        else:            if self.cleaned_data['start_applytime'] and self.cleaned_data['end_applytime']:                sqs = sqs.filter_and(textdate__gte=self.cleaned_data['start_applytime'],                    textdate__lte=self.cleaned_data['end_applytime'])        return sqsclass SearchForm_gdaiguo(FacetedSearchForm, HighlightedSearchForm):    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    autolink = forms.CharField(required=False)    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(SearchForm_gdaiguo, self).search()        # print "处理前",sqs.count()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.filter_and(webid='6').order_by('-textdate')        else:            sqs = sqs.filter_and(webid='6').order_by('-_score')        # if self.cleaned_data['autolink'] :        #     sqs = sqs.filter_and(autolink=self.cleaned_data['autolink'])        # Check to see if a start_date was chosen.        if sqs.count()==0:            pass        else:            if self.cleaned_data['start_applytime'] and self.cleaned_data['end_applytime']:                sqs = sqs.filter_and(textdate__gte=self.cleaned_data['start_applytime'],                    textdate__lte=self.cleaned_data['end_applytime'])        return sqsclass SearchForm_gdzf(FacetedSearchForm, HighlightedSearchForm):    order_by_time = forms.IntegerField(required=False)    start_applytime = forms.CharField(required=False)    end_applytime = forms.CharField(required=False)    autolink = forms.CharField(required=False)    def search(self):        # First, store the SearchQuerySet received from other processing.        sqs = super(SearchForm_gdzf, self).search()        # print "处理前",sqs.count()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['order_by_time']==1 :            sqs = sqs.filter_and(webid='7').order_by('-textdate')        else:            sqs = sqs.filter_and(webid='7').order_by('-_score')        # if self.cleaned_data['autolink'] :        #     sqs = sqs.filter_and(autolink=self.cleaned_data['autolink'])        # Check to see if a start_date was chosen.        if sqs.count()==0:            pass        else:            if self.cleaned_data['start_applytime'] and self.cleaned_data['end_applytime']:                sqs = sqs.filter_and(textdate__gte=self.cleaned_data['start_applytime'],                    textdate__lte=self.cleaned_data['end_applytime'])        return sqsclass ExcludeSearchForm(FacetedSearchForm, HighlightedSearchForm):    excludewords = forms.CharField(required=False)    def search(self):        sqs = super(ExcludeSearchForm ,self).search()        if not self.is_valid():            return self.no_query_found()        if self.cleaned_data['excludewords']:            sqs=sqs.exclude(content=self.cleaned_data['excludewords'])        return sqs