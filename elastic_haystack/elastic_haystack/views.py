# -*- coding: UTF-8 -*-from django.template.response import TemplateResponseimport simplejson as jsonfrom django.http import HttpResponsefrom haystack.query import SearchQuerySetimport requestsdef autocomplete(request):    # sqs = SearchQuerySet().autocomplete(content_auto="fault")    sqs = SearchQuerySet().autocomplete(content_auto=request.GET.get('q', ''))[:5]    suggestions = [result.content_auto for result in sqs]    # Make sure you return a JSON object, not a bare list.    # Otherwise, you could be vulnerable to an XSS attack.    the_data = json.dumps({        'results': suggestions,    })    return HttpResponse(the_data, content_type='application/json')def suggest(request):    # sqs = SearchQuerySet().autocomplete(content_auto="fault")    # sqs = SearchQuerySet().autocomplete(content_auto=request.GET.get('q', ''))[:5]    sqs = SearchQuerySet().auto_query(request.GET.get('q', ''))    sug_sqs = sqs.spelling_suggestion()    # suggestions = [result.content_auto for result in sug_sqs]    suggestions = [sug_sqs]    # Make sure you return a JSON object, not a bare list.    # Otherwise, you could be vulnerable to an XSS attack.    the_data = json.dumps({        'suggestion': suggestions,    })    return HttpResponse(the_data, content_type='application/json')from haystack.views import FacetedSearchViewfrom django.shortcuts import render_to_responseclass MyFacetedSearchView(FacetedSearchView):    token_url = "http://localhost:9200/elastic-data1/_analyze?tokenizer=ik"    def elastic_token(self, url, data):        if data:            data = data.encode("utf-8")            strtoken = requests.post(url, data).content            dic_strtoken = json.loads(strtoken)            list_strtoken = dic_strtoken["tokens"]                        list_len = len(list_strtoken)            # print(list_len)            strtoken_all = ''            for i in range(list_len):                dic = list_strtoken[i]                strtoken_all = dic["token"] + ' ' + strtoken_all            return strtoken_all.rstrip()        else:            return None    def create_response(self):        super(MyFacetedSearchView, self).create_response()        (paginator, page) = self.build_page()        # print "****"        split_query = self.elastic_token(self.token_url, self.query)        # print split_query,"***********!!!!!!!!!!"        if split_query:            split_query = split_query.decode()        context = {            'query': split_query,            'urlquery': self.query,            'form': self.form,            'page': page,            'paginator': paginator,            'suggestion': None,            'count': self.results.count(),            'page_count':self.results.count()/20,            # 'split_query1': split_query,            # 'professionlist': ["服装","鞋包配饰","运动户外","珠宝手表","数码","家电","美容护发","母婴用品","家居建材","美食特产","日用百货","汽车","车品","文化玩乐","旅游","综合","电子商务服务","其他","酒类"],        }        if self.results and hasattr(self.results, 'query') and self.results.query.backend.include_spelling:            context['suggestion'] = self.form.get_suggestion()        context.update(self.extra_context())        return render_to_response(self.template, context, content_type="text/xml;charset=utf-8",context_instance=self.context_class(self.request))# import time# from django import template# register = template.Library()## @register.tag# def print_timestamp(timestamp):# #specify format here#     return time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(ts))from rest_framework.mixins import ListModelMixinfrom drf_haystack.generics import HaystackGenericAPIViewfrom drf_haystack.serializers import HaystackSerializerfrom drf_haystack.viewsets import HaystackViewSetfrom basesearch.models import Notefrom basesearch.search_indexes import NoteIndexclass LocationSerializer(HaystackSerializer):    class Meta:        # The `index_classes` attribute is a list of which search indexes        # we want to include in the search.        index_classes = [NoteIndex]        # The `fields` contains all the fields we want to include.        # NOTE: Make sure you don't confuse these with model attributes. These        # fields belong to the search index!        fields = [            "text", "textdate", "webid"        ]class LocationSearchView(HaystackViewSet):    # `index_models` is an optional list of which models you would like to include    # in the search result. You might have several models indexed, and this provides    # a way to filter out those of no interest for this particular view.    # (Translates to `SearchQuerySet().models(*index_models)` behind the scenes.    index_models = [Note]    serializer_class = LocationSerializer# class SearchView(ListModelMixin, HaystackGenericAPIView):##     serializer_class = LocationSerializer##     def get(self, request, *args, **kwargs):#         return self.list(request, *args, **kwargs)